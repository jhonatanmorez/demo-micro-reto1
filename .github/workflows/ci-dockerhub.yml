name: CI - Build & Push Docker (Docker Hub)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-micro
  JAVA_VERSION: '17'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Build jar (Maven)
        run: mvn -B -DskipTests clean package spring-boot:repackage
        working-directory: demo-micro

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: ${{ secrets.DEPLOY_PORT }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          # known_hosts is optional but recommended (add DEPLOY_KNOWN_HOSTS secret)
          # known_hosts: ${{ secrets.DEPLOY_KNOWN_HOSTS }}
          script: |
            set -e
            IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            echo "Deploying $IMAGE on $(hostname)"


            # (Opcional) login to Docker Hub if image is private
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            fi

            # Pull new image
            docker pull "$IMAGE"

            # Stop & remove old container (if exists)
            docker stop demo-micro || true
            docker rm demo-micro || true

            # Run new container (ajusta variables/volumes/ENV seg√∫n necesites)
            docker run -d \
              --name demo-micro \
              --restart=always \
              -p 8080:8080 \
              "$IMAGE"

            # Cleanup old images
            docker image prune -f || true

            echo "Deployed $IMAGE successfully"
